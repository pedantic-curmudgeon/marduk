version: "3.9"
services:
    # Start test database.
    db:
        image: "mariadb:latest"
        container_name: "db_container"
        ports:
            # This maps port host port 3306 to the container port 3306.
            # That way, we can connect to the database from outside
            # of the Docker network (i.e. the local machine). :)
            - "3306:3306"
        restart: "on-failure"
        environment:
            MYSQL_DATABASE: "${DB_NAME}"
            MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
    # Run Liquibase change log against test database.
    liquibase:
        image: "liquibase/liquibase:latest"
        container_name: "liquibase_container"
        restart: "on-failure"
        depends_on:
            - "db"
        volumes:
            - "/home/raeganbarker/.pyenv/versions/3.8.2/lib/python3.8/site-packages/marduk/docker-compose:/liquibase/changelog"
        command:
            liquibase --url="jdbc:mariadb://db_container:3306/${DB_NAME}" --username="${DB_USER}" --password="${DB_PASSWORD}" --changeLogFile="/changelog/liquibase_changelog_mysql_mariadb.sql" update


# networks:
#     default

    # Run repo tests on test database.
    # repo:
    #     build: .
    #     restart: always
    #     depends_on: liquibase


# https://docs.docker.com/compose/startup-order/
# repo docker image should include the test execution statement?
# need to map volumes so that we can get the test results from the repo?
# in a CI/CD world, we would build/push the repo image, and then reference
# it above instead of using 'build . ' , right?
# Mariadb always uses port 3306?

# This might be useful: https://github.com/ufoscout/docker-compose-wait
# It would need to go into any "waiting" image, though?

# https://docs.docker.com/compose/networking/
# When you compose up, the services will join the "myapp_default" network

# Environment variables:
# https://docs.docker.com/compose/environment-variables/


# Starting/Stopping
# docker-compose up -d
# docker-compose down --volumes

# Other options:
# 1. Make custom image for Liquibase which bundles the change log and wait for it?
# 2. Make custom image for database (Not needed?)
# 3. Make custom image of content which bundles wait for it?

# Still to figure out:
# What's the best way to get the liquibase change log files passed?
# What's the best way to get a content repo to work?
# Can we depend on an exit code from another service before starting another?
# - Doesn't look like it.

# Easiest approach is having the database image already ready.

# https://kifarunix.com/install-and-run-mariadb-as-a-docker-container/
# Keep the data in the Git repo where we define the container?
# Then, when we pull the image, we also have to pull the data?
# Can manually specify a different volume mount?
# $ docker run --name some-mariadb -v /my/own/datadir:/var/lib/mysql -e MARIADB_ROOT_PASSWORD=my-secret-pw -d mariadb:tag

# Progress:
# Starts database
# Tries to update with Liquibase and keeps trying until exit code 0 reached
