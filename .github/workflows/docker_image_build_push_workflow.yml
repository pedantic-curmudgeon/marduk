# # v1
# name: Publish Docker Image
# on: [push]
# jobs:
#   push_to_registry:
#     name: Push Docker Image to Docker Hub
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check Out Repo
#         uses: actions/checkout@v2
#       - name: Push to Docker Hub
#         uses: docker/build-push-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#           repository: raeganbarker/marduk
#           tag_with_ref: true

# v2
name: Publish Docker Image
on: [push]
jobs:

  push_to_registry:
    name: Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log In to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          pull: true
          push: true
          tags: raeganbarker/marduk:latest

  run_pytests:
    name: Run Automated Tests
    needs: push_to_registry
    runs-on: ubuntu-latest
    container:
      image: raeganbarker/marduk:latest
      credentials:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      # - name: Check Directory
      #   run: |
      #     cd /app/marduk/
      #     ls -la
      #     cd pytests
      #     ls -la
      - name: Print System Path
        run: python3 -c "import sys; print(sys.path)"
      - name: Print Python Path
        run: echo $PYTHONPATH
      - name: Import Marduk
        run: python3 -c "import marduk"
      - name: Run Pytests
        run: |
          cd /app/marduk/pytests/
          python3 /app/marduk/pytests/runner.py
      - name: Publish Deliverable
        uses: actions/upload-artifact@v2
        with:
          name: test_results
          path: /app/marduk/pytests/auto_tests.xml
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: /app/marduk/pytests/*.xml


# Next step: https://towardsdatascience.com/speed-up-your-pytest-github-actions-with-docker-6b3a85b943f

# Next step (better?): https://stackoverflow.com/questions/58930529/github-action-how-do-i-run-commands-inside-a-docker-container

# Credentials: https://stackoverflow.com/questions/64033686/how-can-i-use-private-docker-image-in-github-actions


# Could just push a marduk:tests image with the command in it? That way don't
# have to do anything crazy to get the tests to run via actions?
# But what about surfacing the deliverable?
# Can GitHub just get that as an artifact for me from the volume by referencing
# the filesystem path?

# Progress: Figured out how to publish an image. [Done]

# Next: Figure out how to retrieve the image. [Done]

# Next: Figure out how to issue commands to a container from the image. [Done]

# Next: Figure out how to retrieve an artifact from the image. [Done]

# Next: Figure out how to publish the testing artifact in a visible way.

# https://github.com/EnricoMi/publish-unit-test-result-action

# Need to pass the artifact between jobs to expose to publisher?
# Would basically add an extra job, copy the deliverable from the second job,
# and then make it available from the third job?

# https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts

